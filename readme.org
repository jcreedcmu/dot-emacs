This is my emacs configuration. I've been a happy emacs user since the
late '90s, although I have only somewhat belatedly embraced nontrivial
elisp hacking, and certain very popular and nice parts of its
ecosystem.

This config file is mostly my attempt to clean up and organize my
messy --- one might say archaeologically layered --- ~.emacs~ file. I
was inspired by [[https://github.com/patrickt/emacs][patrickt's org-mode literate configuration]] and am
attempting to imitate its cleanliness.

*Current status*: At least there is no longer a giant top-level
section named "Misc", but there remain opportunities for better
organization.

* How to use
** Basic use
Make a file in =~/.site-lisp/location.el= containing just a bare
#+BEGIN_SRC
(setq location 'hostname)
#+END_SRC
for ~hostname~ being the name of this machine.

Make the symlinks
#+BEGIN_SRC shell
HERE=/abspath/to/containing/dir
ln -s $HERE/init.el ~/.emacs
mkdir -p ~/.config/emacs
ln -s $HERE/readme.org ~/.config/emacs/emacs-config.org
mkdir -p ~/.config/i3
ln -s $HERE/i3.config ~/.config/i3/config
#+END_SRC

** Configuration variables
You may want to override these in =~/.site-lisp/local-post=, see below in
[[*Generic local post-init config][the section on local post-init]].
#+BEGIN_SRC emacs-lisp
(defvar jcreed-ideas-file-name
  (expand-file-name "~/self/IDEAS")
  "Location of notes file.")
(defvar jcreed-emacs-config-file-name
  (expand-file-name "~/dot-emacs/readme.org")
  "Location of emacs configuration file.")
(defvar jcreed-local-post-file-name
  (expand-file-name "~/.site-lisp/local-post.el")
  "Location of post-init configuration file.")
#+END_SRC

* Preliminaries
** Load path prelude
#+begin_src emacs-lisp
(setq load-path (cons (expand-file-name "~/.site-lisp/") load-path))

(setq unicode-fonts-block-font-mapping ())
(defmacro ifat (loc &rest body) (if (equal location loc) (cons 'progn body) nil))

(load "location.el")
#+end_src
** Packaging

I think this is redundant with what I put in ~init.el~.
#+BEGIN_SRC emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
								 ("melpa" . "https://melpa.org/packages/")))
(require 'package)
#+END_SRC

** Dark mode
Set this variable so I can use it later in ~notes-mode.el~.
#+BEGIN_SRC emacs-lisp
(setq jcreed-dark-mode t)
#+END_SRC

* General Programming Customization
** Indentation
#+BEGIN_SRC emacs-lisp
(defun jcreed-setup-indent (n)
  ;; web development
  (setq web-mode-markup-indent-offset n) ; web-mode, html tag in html file
  (setq web-mode-css-indent-offset n)    ; web-mode, css in html file
  (setq web-mode-code-indent-offset n) ; web-mode, js code in html file
  (setq css-indent-offset n)
  (setq sml-indent-level n)
  (setq js-indent-level n)
  (setq c-basic-offset n))

(jcreed-setup-indent 2)
#+END_SRC

** Compilation
#+begin_src emacs-lisp
(defun compile-in-dir (dir command)
  (interactive "Compile in directory: \nsCommand: ")
  (let ((default-directory dir))
	 (compile command)))
#+end_src

** Autoload some modes
#+BEGIN_SRC emacs-lisp
(autoload 'python-mode "python-mode" "Python editing mode." t)
(autoload 'ruby-mode "ruby-mode" "Ruby editing mode." t)
(autoload 'clojure-mode "clojure-mode" "Clojure editing mode." t)
#+END_SRC

** Exec-path
This is mainly useful to make sure that whatever nvm has set as the
current `node` executable is accessible from inside emacs.
#+BEGIN_SRC emacs-lisp
(require 'exec-path-from-shell)
(exec-path-from-shell-initialize)
; (setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC
* Custom modes
** Journal mode
#+BEGIN_SRC emacs-lisp
(define-derived-mode journal-mode fundamental-mode
  (setq font-lock-defaults '(journal-mode-highlights))
  (setq mode-name "Journal"))

													 ; XXX split off into separate file
(setq journal-mode-highlights
		'((";\\(Checking\\);" 1 'jcreed-question-face t)
		  (";\\(ChaseChecking\\);" 1 'jcreed-question-face t)
		  (";\\(Capone\\);" 1 'jcreed-answer-face t)
		  (";\\(Ccard\\);" 1 'jcreed-person-face t)
		  (";\\(.*401k\\);" 1 'jcreed-shell-face t)
		  ("^\\([0-9-]+\\);;\\(\$?[0-9.,]+\\)" 2 'jcreed-command-face t)
		  (";\\(PayPal\\);" 1 'jcreed-shell-face t)
		  ("\\?" . 'jcreed-bad-face)))
#+END_SRC
** NaNoWriMo mode
#+BEGIN_SRC emacs-lisp
(defun nano-data ()
  (set-buffer (find-file-noselect "wordcount-history"))
  (goto-char (point-max))
  (let* ((tm (current-time))
			(str1 (int-to-string (car tm)))
			(str2 (int-to-string (cadr tm)))
			(shellcmd (concat "wc -w 2005-*.tex | tail -1 | perl -lane 'print ((" str1 " * 65536 +  " str2 ") . \" $F[0]\" )' ")))
	 (insert (shell-command-to-string shellcmd)))
  (basic-save-buffer))

(define-minor-mode nanowri-mode
  "just an after-save-hook hack for now"
  nil
  " NaNoWriMo"
  nil
  (if nanowri-mode
		(add-hook 'after-save-hook 'nano-data nil t)
	 (remove-hook 'after-save-hook 'nano-data)))
#+END_SRC

** Wordcount mode
#+BEGIN_SRC emacs-lisp
(setq mode-line-position (assq-delete-all 'wc-mode mode-line-position))
(setq mode-line-position
		(append
		 mode-line-position
		 '((wc-mode
			 (6 (:eval (if (use-region-p)
								(format " [ %d words ]"
										  (count-words-region (point) (mark)))
							 (format " [ %d words ]"
										(count-words-region (point-min) (point-max))))))
			 nil))))

(define-minor-mode wc-mode
  "Toggle word-count mode.
With no argument, this command toggles the mode.
A non-null prefix argument turns the mode on.
A null prefix argument turns it off.

When enabled, the total number of characters, words, and lines is
displayed in the mode-line.")

#+END_SRC

* General Interface Customization
** Global Keybindings
#+BEGIN_SRC emacs-lisp
(define-key global-map (kbd "M-=") 'backward-up-list)
(define-key global-map (kbd "M-,") 'pop-tag-mark)
(define-key global-map (kbd "M-.") 'jcreed-find-tag)
(define-key global-map (kbd "C-c p") 'push-tag-mark)
(define-key global-map (kbd "M-C-g") 'jcreed-deactivate-mark)
(define-key global-map (kbd "C-z") 'call-last-kbd-macro)
(define-key global-map (kbd "M-g") 'goto-line) ; how do people live without this?
(define-key global-map (kbd "<C-tab>") 'other-window)
(define-key global-map (kbd "C-c M-%") 'query-replace-regexp)
(define-key global-map (kbd "M-r") 'revert-buffer)
(define-key global-map (kbd "M-q") 'jcreed-fill-paragraph)
(define-key global-map (kbd "RET") 'electric-newline-and-maybe-indent)
(define-key global-map (kbd "M-)") 'jcreed-match-paren)
(define-key global-map (kbd "<C-up>") 'enlarge-window)
(define-key global-map (kbd "<C-down>") 'shrink-window)
(define-key global-map (kbd "<C-left>") 'shrink-window-horizontally)
(define-key global-map (kbd "<C-right>") 'enlarge-window-horizontally)
#+END_SRC
** Custom variables and faces
I used to use the usual =custom-blah-blah= mechanism for managing
configuration, but now that I manage my config inside literate org, it
seems more trouble that it's worth for now. I should dismantle this
eventually.

At least turn off auto-writing customization, because it's just going
to mess up my =init.el=:
#+BEGIN_SRC emacs-lisp
(setq custom-file null-device)
#+END_SRC

And here's the variables that I did have set:
#+BEGIN_SRC emacs-lisp
;;;***

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(allout-command-prefix "")
 '(case-fold-search t)
 '(column-number-mode t)
 '(compilation-scroll-output (quote first-error))
 '(css-indent-offset 2 t)
 '(current-language-environment "English")
 '(dired-bind-jump t)
 '(face-font-selection-order (quote (:slant :height :weight :width)))
 '(global-font-lock-mode t nil (font-lock))
 '(inhibit-startup-screen t)
 '(load-home-init-file t t)
 '(mouse-yank-at-point t)
 '(package-selected-packages
	(quote
	 (tide gnu-elpa-keyring-update sass-mode phi-search multiple-cursors magit company lsp-javascript-typescript lsp-mode yaml-mode web-mode vue-mode typescript-mode typescript tuareg sws-mode sql-indent sml-mode scala-mode rainbow-mode python-mode markdown-mode jade-mode haskell-mode go-mode gnugo erlang coffee-mode clojurescript-mode cider button-lock)))
 '(safe-local-variable-values (quote ((erlang-indent-level . 4) (css-indent-offset . 2))))
 '(sclang-eval-line-forward nil)
 '(search-whitespace-regexp nil)
 '(sentence-end-double-space nil)
 '(show-paren-mode t nil (paren))
 '(show-trailing-whitespace t)
 '(sml-indent-level 2 t)
 '(tab-always-indent t)
 '(tab-width 3)
 '(transient-mark-mode t)
 '(typescript-indent-level 2)
 '(web-mode-enable-auto-quoting nil)
 '(web-mode-extra-keywords (quote (("javascript" "type" "declare" "global")))))

(custom-set-faces
 '(markdown-code-face ((t (:family nil)))))

;;; dark mode
(custom-set-faces
 '(default ((t (:foreground "#fdf6e3" :background "#002b36"))))
 '(font-lock-comment-face ((t (:foreground "#fc523f" :slant italic))))
 '(lsp-inlay-hint-type-face ((t (:foreground "#566" ))))
 '(lsp-inlay-hint-face ((t (:foreground "#566" ))))
 '(font-lock-constant-face ((t (:foreground "#2aa198"))))
 '(font-lock-doc-face ((t (:foreground "#b58900"))))
 '(font-lock-function-name-face ((nil (:foreground "#268bd2"))))
 '(font-lock-keyword-face ((nil (:foreground "#6c61e4" :weight bold))))
 '(font-lock-string-face ((nil (:foreground "#63a363"))))
 '(font-lock-type-face ((nil (:foreground "#859900" :weight bold))))
 '(font-lock-variable-name-face ((nil (:foreground "#d33682"))))
 '(highlight ((t (:background "#0f4553"))))
 '(italic ((((supports :underline t)) (:slant italic))))
 '(link ((t (:foreground "#55f" ))))
 '(region ((t (:background "#004b56"))))
 '(lazy-highlight  ((t (:background "#66305b"))))
 '(secondary-selection ((t (:background "#305b66"))))
 '(tex-verbatim ((t (:background "gray90"))))
 '(trailing-whitespace ((t (:background "#00bfbf"))))
 '(org-block ((t (:foreground "#999"))))
 '(isearch ((t (:foreground "#ffff00"))))
 '(minibuffer-prompt ((t (:foreground "#999"))))
 '(tide-hl-identifier-face ((t (:foreground "#ffff00" :background "#004b56"))))
 '(show-paren-match ((t ( :background "#007198"))))
 '(mode-line ((t (:foreground "#000000" :background "#bbbb88")))))

;;; light mode
(when nil
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
  '(default ((t (:foreground "black" :background "white"))))
  '(font-lock-comment-face ((t (:foreground "#a34" :slant italic))))
  '(font-lock-constant-face ((t (:foreground "#0070ff"))))
  '(font-lock-doc-face ((t (:foreground "#a34"))))
  '(font-lock-function-name-face ((nil (:foreground "#268bd2"))))
  '(font-lock-keyword-face ((nil (:foreground "#6c71c4" :weight bold))))
  '(font-lock-string-face ((nil (:foreground "DarkGreen"))))
  '(font-lock-type-face ((nil (:foreground "#859900" :weight bold))))
  '(font-lock-variable-name-face ((nil (:foreground "#d33682"))))
  '(highlight ((t (:background "#ff0"))))
  '(italic ((((supports :underline t)) (:slant italic))))
  '(link ((t (:foreground "#007" :background "#eef"))))
  '(region ((t (:background "#aff"))))
  '(tex-verbatim ((t (:background "gray90"))))
  '(trailing-whitespace ((t (:background "#ffbfbf"))))
  '(org-block ((t (:foreground "#444")))))
)

#+END_SRC
** Tmp dirs and backups
#+BEGIN_SRC emacs-lisp

(defconst emacs-tmp-dir (format "%s/%s%s/" temporary-file-directory "emacs" (user-uid)))

;;; make backup files in a single place, not polluting various directories

(setq backup-directory-alist
		`((".*" . ,emacs-tmp-dir)))
(setq auto-save-file-name-transforms
		`((".*" ,emacs-tmp-dir t)))
(setq auto-save-list-file-prefix
		emacs-tmp-dir)

#+END_SRC
** Cursor
Make the cursor a dark red.
#+BEGIN_SRC emacs-lisp
(if jcreed-dark-mode
    (set-cursor-color "#dc424f")
  (set-cursor-color "#700"))
#+END_SRC

Don't blink the cursor.
#+begin_src emacs-lisp
(blink-cursor-mode 0)
#+END_SRC

** Bell
#+BEGIN_SRC emacs-lisp
(defcustom mode-line-bell-string "" ; "♪"
  "Message displayed in mode-line by `mode-line-bell' function."
  :group 'user)
(defcustom mode-line-bell-delay 0.1
  "Number of seconds `mode-line-bell' displays its message."
  :group 'user)

;; internal variables
(defvar mode-line-bell-cached-string nil)
(defvar mode-line-bell-propertized-string nil)

(setq visible-bell t)
(defun my-bell-function ()
  (unless (memq this-command
					 '(isearch-abort abort-recursive-edit exit-minibuffer
										  keyboard-quit mwheel-scroll down up next-line previous-line
										  backward-char forward-char))
	 (ding)))

;; (setq ring-bell-function 'my-bell-function)

;;;; I seem to have had a very conservative visual bell in the past,
;;;; experimenting with making it more common.

#+END_SRC
** Window Title
#+BEGIN_SRC emacs-lisp
(setq frame-title-format  '("Emacs [%b]"))

;; Maybe this is dead code now? I might have used it somewhere once.
(defun jcreed-set-frame-title (x)
  (interactive "s")
  (setq frame-title-format (concat "Emacs [%b] --- " x )))
#+END_SRC

** Rainbow mode
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook
			 (lambda ()
													 ;(require 'button-lock)
													 ;(global-button-lock-mode 1)
				;; (button-lock-register-global-button
				;;  "https?://[^[:space:]\n]+"
				;;  'browse-url-at-mouse
				;;  :face 'link :face-policy 'prepend)
				))
#+END_SRC
** Menubar, toolbar, scrollbars
#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(when (boundp 'scroll-bar-mode) (scroll-bar-mode -1))
(when (and (boundp 'tool-bar-mode) (functionp 'tool-bar-mode)) (tool-bar-mode -1))
#+END_SRC
** Enable recase region
#+BEGIN_SRC emacs-lisp
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
#+END_SRC
** Enable narrowing features
#+BEGIN_SRC emacs-lisp
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-region 'disabled nil)
#+END_SRC
** X Clipboard
#+BEGIN_SRC emacs-lisp
(setq x-select-enable-primary t)
(setq x-select-enable-clipboard t)
#+END_SRC
** Timezones & Misc Config Graveyard
#+BEGIN_SRC emacs-lisp
													 ;(require 'browse-kill-ring)
													 ;(browse-kill-ring-default-keybindings)

;; I'm not totally sure why I have this. It might be because I wanted
;; to show eastern time even on machines whose system clock is set to
;; UTC.
(set-time-zone-rule "America/New_York")

;; In any case, this is wrong. It's off by an hour in the summer.

; (set-time-zone-rule "EST")


;; I think "paraphrase-mode" might have been a precursor to "notes-mode".

													 ; (load "/home/jcreed/.site-lisp/paraphrase-mode.el")
													 ; (add-to-list 'auto-mode-alist '("\\.pp$" . latex-paraphrase-mode))


(setq line-move-visual nil)

													 ;(setq-default indent-tabs-mode nil)
#+END_SRC
** Uniquify
#+BEGIN_SRC emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward)
#+END_SRC
** Customization around saving whitespace
#+BEGIN_SRC emacs-lisp
(defun jcreed-save-whitespace ()
  (interactive)
  (remove-hook 'before-save-hook 'delete-trailing-whitespace)
  (setq write-file-functions nil)
  (setq require-final-newline nil))

(defun jcreed-no-save-whitespace ()
  (interactive)
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
  (setq require-final-newline t))
#+END_SRC
** Mousewheel
#+BEGIN_SRC emacs-lisp
(defun sd-mousewheel-scroll-up (event)
  "Scroll window under mouse up by two lines."
  (interactive "e")
  (let ((current-window (selected-window)))
	 (unwind-protect
		  (progn
			 (select-window (posn-window (event-start event)))
			 (scroll-up 2))
		(select-window current-window))))

(defun sd-mousewheel-scroll-down (event)
  "Scroll window under mouse down by two lines."
  (interactive "e")
  (let ((current-window (selected-window)))
	 (unwind-protect
		  (progn
			 (select-window (posn-window (event-start event)))
			 (scroll-down 2))
		(select-window current-window))))

(global-set-key (kbd "<mouse-5>") 'sd-mousewheel-scroll-up)
(global-set-key (kbd "<mouse-4>") 'sd-mousewheel-scroll-down)
#+END_SRC
** Delete trailing whitespace
#+BEGIN_SRC emacs-lisp
(add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC
** Display Date
#+BEGIN_SRC emacs-lisp
(setq display-time-day-and-date t
		display-time-default-load-average nil
		display-time-format "%A %b %e %k:%M")

(display-time)
#+END_SRC

* Useful functions
** Camel-casing
#+BEGIN_SRC emacs-lisp
(defun jcreed-uncamel (b e)
  (interactive "r")
  (replace-regexp "\\([A-Z]\\)" " \\1" nil b e)
  ;; This is not correct; should be a larger region because of the
  ;; spaces inserted
  (downcase-region b e)
  (goto-char b)
  (delete-char 1))

(global-set-key [(control shift tab)] (lambda () (interactive) (other-window -1)))
#+END_SRC

** Find non-ASCII characters
#+BEGIN_SRC emacs-lisp
(defun find-first-non-ascii-char ()
  "Find the first non-ascii character from point onwards."
  (interactive)
  (let (point)
	 (save-excursion
		(setq point
				(catch 'non-ascii
				  (while (not (eobp))
					 (or (eq (char-charset (following-char))
								'ascii)
						  (throw 'non-ascii (point)))
					 (forward-char 1)))))
	 (if point
		  (goto-char point)
		(message "No non-ascii characters."))))
#+END_SRC
** Urlencode region
#+BEGIN_SRC emacs-lisp
;;; url encode and decode regions

(defun func-region (start end func)
  "run a function over the region between START and END in current buffer."
  (save-excursion
	 (let ((text (delete-and-extract-region start end)))
		(insert (funcall func text)))))
(defun hex-region (start end)
  "urlencode the region between START and END in current buffer."
  (interactive "r")
  (func-region start end #'url-hexify-string))
(defun unhex-region (start end)
  "de-urlencode the region between START and END in current buffer."
  (interactive "r")
  (func-region start end #'url-unhex-string))
#+END_SRC
** Make region plaintext
#+BEGIN_SRC emacs-lisp
(defun plaintext (b e)
  (interactive "r")
  (set-text-properties b e nil))
#+END_SRC
** Open buffer in other window
#+BEGIN_SRC emacs-lisp
(defun buffer-menu-other-window ()
  "Select this line's buffer in other window, leaving buffer menu visible?"
  (interactive)

  (let* ((w (selected-window))
			(pop-up-windows nil)
			same-window-buffer-names
			same-window-regexps)
	 (pop-to-buffer (Buffer-menu-buffer t) t nil)
	 (select-window w)
	 ))

#+END_SRC

** Find Tag
#+BEGIN_SRC emacs-lisp
(defun jcreed-find-tag (b e)
  (interactive "r")
  (if mark-active (progn
													 ;		    (deactivate-mark)
						  (find-tag (buffer-substring-no-properties b e)))
	 (find-tag (find-tag-default))))
#+END_SRC
** Explain face at point
#+BEGIN_SRC emacs-lisp
(defun what-face (pos)
  (interactive "d")
  (let ((face (or (get-char-property (point) 'read-face-name)
						(get-char-property (point) 'face))))
	 (if face (message "Face: %s" face) (message "No face at %d" pos))))
#+END_SRC
** Mark manipulation
#+BEGIN_SRC emacs-lisp
(defun jcreed-deactivate-mark () (interactive) (deactivate-mark))
(defun push-tag-mark () (interactive)
		 (ring-insert find-tag-marker-ring (point-marker)))
#+END_SRC
** Fill paragraph
#+BEGIN_SRC emacs-lisp
(defun jcreed-fill-paragraph ()
  (interactive)
  (let ((case-fold-search nil))
	 (fill-paragraph)))
#+END_SRC

** Match paren
#+BEGIN_SRC emacs-lisp
(defun jcreed-match-paren (arg)
  "Go to the matching paren if on a paren."
  (interactive "p")
  (cond ((looking-at "\\s\(") (forward-list 1))
		  ((looking-back "\\s\)" (1- (point-marker))) (backward-list 1))
		  ((eq major-mode 'ruby-mode) (goto-matching-ruby-block))))
#+END_SRC

** Increment the selected number

I find this useful for keyboard macros.

#+BEGIN_SRC emacs-lisp
(defun jcreed-inc (start end)
  (interactive "r")
  (let ((n (string-to-number (buffer-substring start end))))
	 (delete-region start end)
	 (insert (number-to-string (+ n 1)))))
#+END_SRC

** Find file other window
#+BEGIN_SRC emacs-lisp
;; XXX does this belong with notes-mode?
(defun jcreed-parse-line-num (filespec)
	 (if (string-match "\\(.*\\):\\([0-9]+\\)" filespec)
		  (cons (match-string 1 filespec)
				  (string-to-number (match-string 2 filespec)))
		(list filespec)))

(defun jcreed-find-file-other-window (filespec)
	 (let* ((fileinfo (jcreed-parse-line-num filespec))
			  (filename (car fileinfo))
			  (linenum (cdr fileinfo))
			  (value (find-file-noselect filename))
			  (pop-up-windows t))
		(pop-to-buffer value '(display-buffer-use-some-window
									  . ((inhibit-same-window . t))))
		(when linenum
		  (goto-char (point-min))
		  (forward-line (1- linenum)))))

#+END_SRC

** Twelf recoloring

I think I probably eventually want to remove this since I don't know
what it's really for.

#+BEGIN_SRC emacs-lisp
(defun jcreed-twelf-recolor-fast ()
  (interactive)
  (kill-all-local-variables)
  (global-font-lock-mode-enable-in-buffers)
  (run-hooks 'find-file-hook))

(defun jcreed-twelf-recolor ()
  (interactive)

  (global-font-lock-mode-cmhh)

  (setq mode-name "Fundamental")
  (setq major-mode 'fundamental-mode)
													 ;  (pp change-major-mode-hook)
													 ;				  (run-hooks 'change-mode-major-hook)

													 ;(font-lock-change-mode)
  (global-font-lock-mode-cmhh)
  (global-font-lock-mode-enable-in-buffers)
  (run-hooks 'find-file-hook)
  (font-lock-fontify-buffer))

													 ;(global-set-key (kbd "M-r") 'jcreed-recolor)
#+END_SRC

* Tool Configuration
** Disable some ~vc-mode~ feature I don't want
#+BEGIN_SRC emacs-lisp
(remove-hook 'find-file-hooks 'vc-find-file-hook)
#+END_SRC
** Terminal
#+BEGIN_SRC emacs-lisp
(setq term-term-name "vt100")
#+END_SRC
** Rainbow Mode
#+BEGIN_SRC emacs-lisp
(autoload 'rainbow-mode "rainbow-mode" "Colorizes stuff." t)
#+END_SRC
** Comint Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'comint-mode-hook
			 '(lambda ()
				 (define-key comint-mode-map
					[mouse-2]
					'mouse-yank-primary)))
#+END_SRC
** Buffer list
#+BEGIN_SRC emacs-lisp
(defun jcreed-sort-buffers-by-file ()
  (interactive)
  (Buffer-menu-sort 6))

(add-hook 'Buffer-menu-mode-hook
			 (lambda ()
													 ;            (jcreed-sort-buffers-by-file)
				(define-key Buffer-menu-mode-map (kbd "M-f") 'jcreed-sort-buffers-by-file)))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun jcreed-kill-prefix (prefix)
  "Use when in the *Buffer List* buffer menu.
Feed it a string that is a regex that matches filenames.
All matching buffers will be marked for deletion."
  (interactive (list (read-file-name "What prefix? " "/")))
  (save-excursion
	 (beginning-of-buffer)
	 (let ((going t))
		(while going
		  (let* ((buffer (Buffer-menu-buffer))
					(file-name
					 (or (buffer-file-name buffer)
						  ;; In dired-mode we need `dired-directory' which
						  ;; might be a list and may not be fully expanded.
						  (with-current-buffer buffer
							 (and (eq major-mode 'dired-mode)
									(expand-file-name
									 (if (consp dired-directory)
										  (car dired-directory)
										dired-directory)))))))
			 (when (and file-name
							(string-match (concat "^" prefix) file-name))
				(Buffer-menu-delete)
				(forward-line -1)))
		  (setq going (= 0 (forward-line 2)))
		  (forward-line -1)))))

(add-hook 'Buffer-menu-mode-hook
			 (lambda ()
				(define-key Buffer-menu-mode-map "\C-k" 'jcreed-kill-prefix)))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
(require 'dired)
(global-set-key (kbd "C-x C-j") #'dired-jump)
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(defun jcreed-magit-copy-region-hunk ()
  (interactive)
  (when (magit-section-internal-region-p)
	 (magit-section-when hunk
								(deactivate-mark)
								(let ((text (buffer-substring-no-properties
												 (region-beginning) (region-end))))
								  (kill-new (replace-regexp-in-string "^[ \\+\\-]" "" text))))))

(define-key global-map "\C-cm" 'magit-status)
#+END_SRC
** Vc
Always follow symlinks.
#+BEGIN_SRC emacs-lisp
(setq vc-follow-symlinks t)
#+END_SRC
** Org Mode
*** Other
#+BEGIN_SRC emacs-lisp
(require 'org)

;; Don't auto-indent when demoting and promoting
(setq org-adapt-indentation nil)

;; This would if set to t, make C-a go to beginning of heading text, not beginning of line
;; cf.
;; https://www.reddit.com/r/emacs/comments/965656/orgmode_how_to_programmatically_move_to_first/
;; https://emacs.stackexchange.com/questions/17502/how-to-navigate-most-efficiently-to-the-start-or-end-of-the-main-text-of-an-org
(setq org-special-ctrl-a nil)

;; I'd rather have control-tab defer to the global map, where it's
;; bound to other-window
(define-key org-mode-map [(control tab)] nil)
#+END_SRC

to retangle the current file.
*** Retangling
I tried executing

#+BEGIN_SRC emacs-lisp :tangle no
(save-excursion (org-babel-tangle-file "~/.config/emacs/emacs-config.org" "~/.config/emacs/emacs-config.el"))
#+END_SRC

but seemingly since =~/.config/emacs/emacs-config.org= is a symlink to
~/home/jcreed/dot-emacs/readme.org~ this makes ~org-mode~ very
confused and it deletes my buffer. Instead I can execute

#+BEGIN_SRC emacs-lisp
;; Don't indent source code blocks additionally
(setq org-edit-src-content-indentation 0)
;; Convenience for retangling
(defun jcreed-retangle ()
  (interactive)
  (org-babel-tangle-file "/home/jcreed/dot-emacs/readme.org" "~/.config/emacs/emacs-config.el"))
(define-key global-map "\C-x\C-r" 'jcreed-retangle)
#+END_SRC
* Internationalization & Encodings
** Chinese
#+BEGIN_SRC emacs-lisp
;; better fonts for chinese
(set-fontset-font t 'han "WenQuanYi Micro Hei")
#+END_SRC

** Esperanto
#+BEGIN_SRC emacs-lisp
(setq file-coding-system-alist
		(cons '(".*\\.eo" . iso-8859-3) file-coding-system-alist))
#+END_SRC

** Unicode
#+BEGIN_SRC emacs-lisp
(setq default-process-coding-system '(utf-8 . utf-8))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(ifat baez
		(require 'unicode-fonts)
		(unicode-fonts-setup))
#+END_SRC
* Programming Language Configuration
** Paredit & Other LISP
#+BEGIN_SRC emacs-lisp

(autoload 'paredit-mode "paredit"
  "Turn on pseudo-structural editing of Lisp code."
  t)

(defun paredit () (interactive) (enable-paredit-mode))

(defun jcreed-kill-sexp-tail ()
  (interactive)
  (let ((begin (point))
		  (end 0))
	 (save-excursion
		(paredit-forward-up)
		(backward-char)
		(setq end (point)))
	 (kill-region begin end)))

(add-hook 'paredit-mode-hook
			 '(lambda ()
				 (define-key paredit-mode-map (kbd "M-)") 'jcreed-match-paren)
				 (define-key paredit-mode-map (kbd "M-[") 'paredit-wrap-square)
				 (define-key paredit-mode-map (kbd "M-{") 'paredit-wrap-curly)
				 (define-key paredit-mode-map (kbd "M-r") 'revert-buffer)
				 (define-key paredit-mode-map (kbd "C-M-r") 'paredit-raise-sexp)
				 (define-key paredit-mode-map (kbd "M-k") 'jcreed-kill-sexp-tail)))
#+END_SRC

** Verilog
#+begin_src emacs-lisp

(defun jcreed-compile-verilog ()
  (interactive)
  (compile-in-dir "/home/jcreed/proj/ben-eater" "make"))

(add-hook 'verilog-mode-hook #'setup-verilog-mode)
(defun setup-verilog-mode ()
 (define-key verilog-mode-map "\C-c\C-f" 'jcreed-compile-verilog))

(setq verilog-auto-newline nil)
(setq verilog-auto-indent-on-newline nil)
#+END_SRC

** Typescript
#+begin_src emacs-lisp

; getting spurious eslint errors? run this function
(defun fixup-tide-parse-error ()
  (defun tide-parse-error (response checker)
	 (-map
     (lambda (diagnostic)
		 (let* ((start (plist-get diagnostic :start))
              (line (plist-get start :line))
              (column (plist-get start :offset))
              (level (if (string= (plist-get diagnostic :category) "suggestion") 'info 'error))
              (text (plist-get diagnostic :text)))
			(when (plist-get diagnostic :relatedInformation)
           (setq text (concat text (propertize " ⮐" 'face 'font-lock-warning-face))))
			(put-text-property 0 1 'diagnostic diagnostic text)
			(flycheck-error-new-at line column level text
                                :checker checker
                                :id (plist-get diagnostic :code))))
     (let ((diagnostic (car (tide-plist-get response :body))))
		 (-concat (plist-get diagnostic :syntaxDiag)
					 (plist-get diagnostic :semanticDiag)
													 ;(plist-get diagnostic :suggestionDiag)
					 )))))
#+end_src
** Python
#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist (cons '("\\.py$" . python-mode) auto-mode-alist))
(setq interpreter-mode-alist (cons '("python" . python-mode)
											  interpreter-mode-alist))
#+END_SRC

** LaTeX
*** Mode
#+BEGIN_SRC emacs-lisp
(add-to-list (quote auto-mode-alist) (quote ("\\.tex\\'" . latex-mode)))
#+END_SRC
*** Templates
#+BEGIN_SRC emacs-lisp
(defun jcreed-tcons (x) (cons x x))
(setq jcreed-completion (mapcar 'jcreed-tcons '("lemma" "corollary" "theorem" "conjecture" "proposition" "question" "definition" "remark" "postulate" "prooftree" "easyrule")))
(setq jcreed-proof (mapcar (lambda (x) (cons x 1)) '("lemma" "corollary" "theorem")))
(setq jcreed-math (mapcar (lambda (x) (cons x 1)) '("prooftree")))

(defun jcreed-insert-easy-template ()
  "Inserts a copy of my easyrule template"
  (interactive)
  (insert "\\[\n\\erule\n{}\n{")
  (let ((pm (point-marker)))
	 (insert "}\n\\]")
	 (goto-char pm)))

(defun jcreed-insert-other ()
  "Inserts a proposition/lemma/corollary/theorem template."
  (interactive)
  (let ((env (completing-read "Environment: " jcreed-completion '(lambda (x) t) t)))
	 (if (equal env "easyrule") (jcreed-insert-easy-template)
		(if (assoc env jcreed-math)
			 (insert "\\[\n"))
		(insert (concat "\\begin{" env "}\n"))
		(if (assoc env jcreed-math)
			 (insert "\\[\n\\justifies\n\\]\n\\justifies\n"))
		(let ((pm (point-marker)))
		  (insert (concat "\n\\end{" env "}\n"))
		  (if (assoc env jcreed-proof)
				(insert "\n\\begin{proof}\n\n\\cqed\n\\end{proof}\n"))
		  (if (assoc env jcreed-math)
				(insert "\\]\n"))
		  (goto-char pm)))
	 (recenter)))

(add-hook 'latex-mode-hook
			 '(lambda ()
				 (define-key tex-mode-map
					"\C-cz"
					'jcreed-insert-other)))
#+END_SRC

*** Lifecycle
#+BEGIN_SRC emacs-lisp
(setq tex-dvi-view-command "xdvi.bin")

(setq tex-dvi-view-args '("-s" "5" "-geometry" "1024x600+0+600"))

(defun jcreed-tex-bibtex-file ()
  "Run BibTeX on the current buffer's file."
  (interactive)
  (if (tex-shell-running)
		(tex-kill-job)
	 (tex-start-shell))
  (let* (shell-dirtrack-verbose
			(source-file (tex-main-file))
			(x (message (expand-file-name source-file)))
			(tex-out-file
			 (tex-append (file-name-nondirectory source-file) ""))
			(file-dir (file-name-directory (expand-file-name source-file))))
	 (tex-send-command tex-shell-cd-command file-dir)
	 (tex-send-command tex-bibtex-command tex-out-file))
  (tex-display-shell))

(defun jcreed-tex-view ()
  "Preview the last `.dvi' file made by running TeX under Emacs.
This means, made using \\[tex-region], \\[tex-buffer] or \\[tex-file].
The variable `tex-dvi-view-command' specifies the shell command for preview."
  (interactive)
  (let ((view-file-name-dvi (tex-append tex-print-file ".dvi"))
		  test-name)
	 (if (and (not (equal (current-buffer) tex-last-buffer-texed))
				 (file-newer-than-file-p
				  (setq test-name (tex-append (buffer-file-name) ".dvi"))
				  view-file-name-dvi))
		  (setq view-file-name-dvi test-name))
	 (if (not (file-exists-p view-file-name-dvi))
		  (error "No appropriate `.dvi' file could be found")
		(progn
													 ;       (debug)
		  (apply 'start-process (append '("xdvi" "*xdvi*") (cons tex-dvi-view-command nil)
												  tex-dvi-view-args (cons view-file-name-dvi nil)))))))

(defvar jcreed-tex-main-buffer nil
  "Set jcreed-tex-main-buffer to be something to always tex that rather than the current buffer")

(defun jcreed-set-main-buffer ()
  (interactive) (setq jcreed-tex-main-buffer (current-buffer)))

(defun jcreed-clear-main-buffer ()
  (interactive) (setq jcreed-tex-main-buffer nil))

(defun jcreed-tex-file ()
  (interactive)
  (when jcreed-tex-main-buffer
	 (set-buffer jcreed-tex-main-buffer))
  (tex-file)
  (jcreed-tex-signal))

(defun jcreed-tex-signal ()
  (interactive)
  (save-excursion
	 (let* ((xdvi-proc (get-process "xdvi")))
		(when xdvi-proc
		  (let* ((tex-proc (tex-shell-proc))
					(buf (process-buffer tex-proc))
					(string
					 (concat "kill -USR1 " (number-to-string (process-id xdvi-proc)))))
			 ;; Switch to buffer before checking for subproc output in it.
			 (set-buffer buf)
			 (goto-char (process-mark tex-proc))
			 (insert string)
			 (comint-send-input))))))

(add-hook 'latex-mode-hook
			 '(lambda ()
				 (define-key tex-mode-map "\C-c\C-v" 'jcreed-tex-view)
				 (define-key tex-mode-map "\C-c\C-d" 'jcreed-tex-bibtex-file)
				 (define-key tex-mode-map "\C-c\C-f" 'jcreed-tex-file)
				 (define-key tex-mode-map "\C-cf" 'jcreed-tex-signal)))
#+END_SRC

*** Make PDFLaTeX default
#+BEGIN_SRC emacs-lisp
(add-hook 'latex-mode-hook
			 '(lambda ()
				 (setq tex-command "pdflatex")))
#+END_SRC

** Agda
*** Mode
#+BEGIN_SRC emacs-lisp
(add-hook 'agda2-mode-hook
			 (lambda ()
				(jcreed-add-agda-keys)
				(define-key agda2-mode-map "\M-," 'agda2-go-back)
				(define-key agda2-mode-map "\C-cs" 'jcreed-swap-agda-implicit)
				(define-key agda2-mode-map "\C-cc" 'jcreed-agda-copy-type)
				(define-key agda2-mode-map "\C-c\C-c" 'agda2-make-case)))
#+END_SRC

*** Input Method
#+BEGIN_SRC emacs-lisp
(setq jcreed-add-agda-keys-called nil)
(defun jcreed-add-agda-keys ()
  (when (not jcreed-add-agda-keys-called)
	 (require 'agda-input)
	 (with-temp-buffer
		(activate-input-method "Agda") ;; the input method has to be triggered for `quail-package-alist' to be non-nil
		(let ((quail-current-package (assoc "Agda" quail-package-alist)))
		  (quail-define-rules ((append . t))
									 ("\\esh" ?ʃ)
									 ("\\prov" ?⊢)
									 ("\\lol" ?⊸)
									 ("\\adj" ?⊣)
									 ("\\prequiv" ["⊣⊢"]))))
	 (setq jcreed-add-agda-keys-called t)))
#+END_SRC

*** Plumbing
#+BEGIN_SRC emacs-lisp
(defun jcreed-shell-exit-code-and-output (program &rest args)
  "Run PROGRAM with ARGS and return the exit code and output in a list."
  (with-temp-buffer
    (list (apply 'call-process program nil (current-buffer) nil args)
          (buffer-string))))

(when (eq (car (jcreed-shell-exit-code-and-output "which" "agda-mode")) 0)
  (load-file (let ((coding-system-for-read 'utf-8))
					(shell-command-to-string "agda-mode locate"))))

(add-hook 'notes-mode-hook
			 (lambda ()
				(jcreed-add-agda-keys)
				(set-input-method "Agda")))


#+END_SRC

*** Swap Implicit
#+BEGIN_SRC emacs-lisp
(defun jcreed-swap-agda-implicit ()
  (interactive)
  (save-excursion
	 (if (re-search-backward "[({]" nil t)
		  (let ((ms (match-string 0)))
			 (cond
			  ((equal ms "(")
				(replace-match "{")
				(re-search-forward ")")
				(replace-match "}"))
			  ((equal ms "{")
				(replace-match "(")
				(re-search-forward "}")
				(replace-match ")")))))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+END_SRC

*** Copy Type
#+BEGIN_SRC emacs-lisp
(defun jcreed-agda-copy-type ()
  (interactive)
  (save-excursion
													 ;    (agda2-goal-type) ;; doesn't seem synchronous enough? boo.
	 (set-buffer "*Agda information*")
	 (kill-ring-save (point-min) (point-max))))
#+END_SRC

** Rust
#+BEGIN_SRC emacs-lisp
(when nil
(autoload 'rust-mode "rust-mode" "Start rust-mode" t)
(add-to-list 'auto-mode-alist '("\\.rs$" . rust-mode))
)
#+END_SRC

** Ruby
#+BEGIN_SRC emacs-lisp
													 ; from http://ck.kennt-wayne.de/2013/may/emacs:-jump-to-matching-paren-beginning-of-block
(defun goto-matching-ruby-block ()
  (interactive)
  (cond
	;; are we at an end keyword?
	((equal (current-word) "end")
	 (ruby-beginning-of-block)) ; not quite right for do not at beginning of line

	;; or are we at a keyword itself?
	((string-match (current-word) "\\(else\\|for\\|while\\|until\\|if\\|class\\|module\\|case\\|unless\\|def\\|begin\\|do\\)")
	 (ruby-end-of-block)
	 (forward-word))))
#+END_SRC

** Elisp
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook
			 '(lambda ()
				 (define-key emacs-lisp-mode-map "\C-o" 'lisp-complete-symbol)
				 ))

(add-hook 'lisp-interaction-mode-hook
			 '(lambda ()
				 (define-key lisp-interaction-mode-map
					"\C-o"
					'lisp-complete-symbol)))
#+END_SRC

** Haskell
#+BEGIN_SRC emacs-lisp
(defun jcreed-find-haskell-tag ()
  (interactive)
  (ring-insert find-tag-marker-ring (point-marker))
  (haskell-mode-jump-to-def (haskell-string-drop-qualifier
									  (haskell-ident-at-point))))
#+END_SRC
** SML
#+BEGIN_SRC emacs-lisp
(add-hook 'sml-mode-hook
			 '(lambda ()
				 (setq sml-compile-command "CM.make \"sources.cm\"")
				 (setq sml-compile-commands-alist '(("CM.make \"sources.cm\"" . "sources.cm")))))
#+END_SRC
** Forth
#+BEGIN_SRC emacs-lisp
(autoload 'forth-mode "gforth" "Colorizes stuff." t)
#+END_SRC

** LISP
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.se$" . emacs-lisp-mode))
(add-hook 'emacs-lisp-mode-hook '(lambda () (paredit-mode)))
(add-hook 'clojure-mode-hook '(lambda () (paredit-mode)))
(define-key global-map "\C-x;" 'comment-region)
(define-key global-map (kbd "C-S-k") 'kill-sexp)
(define-key global-map (kbd "C-k") 'kill-line)
#+END_SRC

** LISP
#+BEGIN_SRC emacs-lisp
(defun eval-and-replace (value)
  "Evaluate the sexp at point and replace it with its value"
  (interactive (list (eval-last-sexp nil)))
  (kill-sexp -1)
  (insert (format "%S" value)))
#+END_SRC

** SML
#+BEGIN_SRC emacs-lisp

(add-to-list 'load-path "/home/jcreed/.site-lisp/sml-mode-4.0")
(autoload 'sml-mode "sml-mode" "Sml editing mode." t)
#+END_SRC

** Lua
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/home/jcreed/.site-lisp/lua-mode")
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))

#+END_SRC

** Perl
#+BEGIN_SRC emacs-lisp
(add-hook 'cperl-mode-hook
			 (lambda ()
				(define-key cperl-mode-map "\t" 'indent-for-tab-command)))
#+END_SRC

** JS
#+BEGIN_SRC emacs-lisp
(setenv "NODE_NO_READLINE" "1")
#+END_SRC

** Python
#+BEGIN_SRC emacs-lisp
(global-eldoc-mode -1)
(defun jcreed-python-mode-hook ()
  (setq eldoc-mode nil)
  (setq indent-tabs-mode nil
		  py-indent-offset 2
		  tab-width 2))
(add-hook 'python-mode-hook #'jcreed-python-mode-hook)
#+END_SRC
** Rust
#+BEGIN_SRC emacs-lisp
(when nil
  (add-hook 'rust-mode-hook
			   '(lambda ()
				   (company-mode)
				   (define-key rust-mode-map (kbd "C-x ]") #'company-indent-or-complete-common)
				   (setq company-tooltip-align-annotations t)
				   (setq compile-command "~/.cargo/bin/cargo build")
				   (setq compilation-read-command nil)
				   (define-key rust-mode-map "\C-c\C-f" 'compile)
				   (define-key rust-mode-map "\C-c\C-d" 'rust-format-buffer)
				   (define-key rust-mode-map "\M-;" 'company-complete)
				   (add-hook 'rust-mode-hook #'racer-mode)
				   (add-hook 'racer-mode-hook #'eldoc-mode)
				   ))
  (add-hook 'racer-mode-hook #'eldoc-mode))

(ifat system76
		(defun jcreed-rustic-mode-hook ()
		  ;; these all seem to need lsp-workspace-restart
		  ;; to take effect
		  (setq lsp-inlay-hint-enable t)
		  (setq lsp-enable-on-type-formatting nil)
		  (setq lsp-rust-analyzer-display-lifetime-elision-hints-enable "skip_trivial")
		  (setq lsp-rust-analyzer-display-chaining-hints t)
		  (setq lsp-rust-analyzer-display-lifetime-elision-hints-use-parameter-names t)
		  (setq lsp-rust-analyzer-display-closure-return-type-hints t)
		  (setq lsp-rust-analyzer-display-parameter-hints nil)
		  (setq lsp-rust-analyzer-display-reborrow-hints nil)
		  (setq rustic-format-on-save t)
		  (setq rustic-format-on-save-method 'rust-format-buffer)
		  (define-key rust-mode-map (kbd "M-;") 'company-complete)
		  (setq rust-format-goto-problem nil)
		  (setq rust-format-show-buffer nil)
		  (define-key rustic-mode-map (kbd "C-c C-.") 'lsp-inlay-hints-mode)
		  (define-key rustic-mode-map (kbd "M-.") 'lsp-find-definition))
		(add-hook 'rustic-mode-hook 'jcreed-rustic-mode-hook))
#+END_SRC

** Typescript
#+BEGIN_SRC emacs-lisp
(defun setup-tide-mode ()
  (interactive)
  (tide-setup)

  ;; Don't care about these
  (setq-default tide-disable-suggestions t)

  ;; formats the buffer before saving
  (add-hook 'before-save-hook 'tide-format-before-save)
  (eldoc-mode +1)
  (flycheck-mode +1)
  (setq flycheck-check-syntax-automatically '(save mode-enabled))
  ;;  (eldoc-mode +1)
  (tide-hl-identifier-mode +1)
  ;; company is an optional dependency. You have to
  ;; install it separately via package-install
  ;; `M-x package-install [ret] company`
  (company-mode +1)
  (setq company-idle-delay nil)
  (define-key tide-mode-map "\C-c\C-r" 'tide-references)
  (define-key tide-mode-map "\C-c\C-s" 'tide-rename-symbol)
  (define-key tide-mode-map "\M-;" 'company-complete)
  (fixup-tide-parse-error))

(add-hook 'web-mode-hook
			 (lambda ()
				(when (string-equal "tsx" (file-name-extension buffer-file-name))
				  (setup-tide-mode))))

;;; enable typescript-tslint checker
;; (require 'flycheck)
;; (flycheck-add-mode 'typescript-tslint 'web-mode)

;; aligns annotation to the right hand side
(setq company-tooltip-align-annotations t)




(add-hook 'typescript-mode-hook #'setup-tide-mode)

(defun tide-references ()
  "List all references to the symbol at point."
  (interactive)
  (let ((response (tide-command:references)))
	 (tide-on-response-success response
										(let ((references (tide-plist-get response :body :refs)))
										  (-if-let (usage (tide-find-single-usage references))
													  (progn
														 (message "This is the only usage.")
														 (tide-jump-to-filespan usage nil nil))
													  ;; In tide's actual code, this is
													  ;;    (tide-jump-to-filespan usage nil t)
													  ;; but I prefer it to do
													  ;;    (ring-insert find-tag-marker-ring (point-marker)))
													  ;; when there's only one reference so I can M-, my way back
													  (display-buffer (tide-insert-references references)))))))
#+END_SRC

** Scala
#+BEGIN_SRC emacs-lisp
(add-to-list (quote auto-mode-alist) (quote ("\\.scala\\'" . scala-mode)))
#+END_SRC

** Coffeescript
#+BEGIN_SRC emacs-lisp
(autoload 'coffee-mode "coffee-mode" "Coffeescript editing mode." t)
#+END_SRC

** Web-mode
#+BEGIN_SRC emacs-lisp
;; web-mode config
(ifat baez (require 'web-mode))

(add-to-list 'auto-mode-alist '("\\.jsx\\'" . web-mode))
(add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))

(defadvice web-mode-highlight-part (around tweak-jsx activate)
  (if (equal web-mode-content-type "jsx")
		(let ((web-mode-enable-part-face nil))
		  ad-do-it)
	 ad-do-it))

(setq web-mode-content-types-alist
		'(("jsx" . "\\.js[x]?\\'")
		  ("jsx" . "\\.ts[x]?\\'")))
;;;;;;;;;;;

#+END_SRC

** Lean
#+BEGIN_SRC emacs-lisp
(setq lean-rootdir "/home/jcreed/.elan")
(setq lean-memory-limit 8000)
#+END_SRC

* Customization for ~chef~
~chef~ is a 2015 MacBook Pro which I inherited from my employment at Chef.

** Meta Key
#+BEGIN_SRC emacs-lisp
(ifat chef
      (setq mac-command-modifier 'meta))
#+END_SRC

** Faces
#+BEGIN_SRC emacs-lisp
(ifat chef (custom-theme-set-faces
				'user
				'(default ((((class color) (min-colors 88) (background light)) (:foreground "#073642" :background "#fdf6e3"))))
				'(font-lock-comment-face ((nil (:foreground "#93a1a1"))))
				'(font-lock-constant-face ((nil (:foreground "#dc322f"))))
				'(font-lock-doc-face ((t (:inherit font-lock-string-face :foreground "#dc322f"))))
				'(font-lock-function-name-face ((nil (:foreground "#268bd2"))))
				'(font-lock-keyword-face ((nil (:foreground "#6c71c4" :weight bold))))
				'(font-lock-string-face ((nil (:foreground "#2aa198"))))
				'(font-lock-type-face ((nil (:foreground "#859900" :weight bold))))
				'(font-lock-variable-name-face ((nil (:foreground "#d33682"))))
				'(highlight ((t (:background "#fff"))))
				'(italic ((((supports :underline t)) (:slant italic))))))
#+END_SRC

** Whitespace
#+BEGIN_SRC emacs-lisp
(ifat chef
		(require 'whitespace)
		(setq whitespace-style '(face empty tabs lines-tail trailing))
		(setq-default indent-tabs-mode nil))
#+END_SRC

** VC hooks
#+BEGIN_SRC emacs-lisp
(ifat chef
		(remove-hook 'find-file-hooks 'vc-find-file-hook) ; perf win
		(setq vc-handled-backends nil)

													 ;      (add-to-list 'load-path "/home/jcreed/.site-lisp/expand-region.el")
													 ;      (require 'expand-region)
													 ;      (global-set-key (kbd "C-=") 'er/expand-region)
		)
#+END_SRC

** Switch Frames
#+BEGIN_SRC emacs-lisp
(ifat chef
		(define-key global-map (kbd "M-`") 'other-frame))
#+END_SRC

** Columns
#+BEGIN_SRC emacs-lisp
(ifat chef
		;; XXX should change this if I ever work on code that actually cares
		;; about tiny screens again.
		(setq highlight-80+-columns 80))

#+END_SRC

** Auto-modes
#+BEGIN_SRC emacs-lisp
(ifat chef
		(add-to-list 'auto-mode-alist '("\\.js" . js-mode))
		(add-to-list 'auto-mode-alist '("\\.erl" . erlang-mode)))
#+END_SRC
** Bell

#+BEGIN_SRC emacs-lisp
(ifat chef
		;; adapted from https://github.com/zenspider/elisp/blob/master/rwd-bell.el
		(setq mode-line-bell-propertized-string
				(propertize
				 (concat
				  (propertize
					"x"
					'display
					`(space :align-to (- right ,(string-width mode-line-bell-string))))
				  mode-line-bell-string)
				 'face '(:background "black" :foreground "red")))

;;;###autoload
		(defun mode-line-bell ()
		  "Briefly display a highlighted message in the mode-line.
The string displayed is the value of `mode-line-bell-string',
with a red background; the background highlighting extends to the
right margin.  The string is displayed for `mode-line-bell-delay'
seconds.
This function is intended to be used as a value of `ring-bell-function'."
		  (message mode-line-bell-propertized-string)
		  (sit-for mode-line-bell-delay)
		  (message ""))

;;;###autoload
		(setq ring-bell-function 'mode-line-bell))
#+END_SRC
** Language Config
*** Agda
#+BEGIN_SRC emacs-lisp
(ifat chef

		(setq agda-path "/Users/jreed/.cabal/bin/")
		(load-file (let ((coding-system-for-read 'utf-8))
						 (shell-command-to-string (concat agda-path "agda-mode locate"))))

		;; (setq agda2-include-dirs '("."  "/Users/jreed/.agda/HoTT-Agda/core"))
		(setq agda2-program-name (concat agda-path "agda"))

		;; This is so we're sure we're getting Primitive.agda from the version-controlled dev dir.
													 ;      (setenv "Agda_datadir" "/Users/jreed/.cabal/share/x86_64-osx-ghc-7.10.3/Agda-2.6.0")

		(add-hook 'haskell-mode-hook
					 '(lambda ()
						 (define-key haskell-mode-map "\M-." 'jcreed-find-haskell-tag))))
#+END_SRC
*** Go
#+BEGIN_SRC emacs-lisp
(ifat chef
		(add-hook 'before-save-hook #'gofmt-before-save))
#+END_SRC

*** Twelf
#+BEGIN_SRC emacs-lisp
(ifat chef
		(setq twelf-root "/Applications/Twelf/")
		(load (concat twelf-root "emacs/twelf-init.el")))
#+END_SRC

*** Rust
#+BEGIN_SRC emacs-lisp
(ifat chef
		(setenv "PATH" (concat (getenv "PATH") ":/Users/jreed/.cargo/bin"))
		; (setq exec-path (append exec-path '("/Users/jreed/.cargo/bin")))
		(setq rust-format-on-save t)
		)
#+END_SRC

* Customization for ~baez~
~baez~ was my desktop machine at one point. I seem to have brought
along the configuration for it to my current Debian machine, which has
the hostname ~shufa~, actually.
** Auto-dim-other-buffers

#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook (lambda ()
  (when (fboundp 'auto-dim-other-buffers-mode)
    (auto-dim-other-buffers-mode t))))
#+END_SRC

** Faces
#+BEGIN_SRC emacs-lisp
;; Have become fond of iosevka lately
(set-face-attribute 'default nil :family "iosevka" :width 'normal :height 108)

;; In case I want to go back to using codon, this suffices
(defun jcreed-pick-codon () (interactive)
		(set-face-attribute 'default nil :family "codon" :height 90))

;; Leaving this here now for historical purposes, but I may just delete it at some point.
(ifat baez-nope
		(custom-theme-set-faces
		 'user
		 '(default ((t (:inherit nil :stipple nil :background "white" :foreground "black" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight normal :height 90 :width normal :foundry "cbp" :family "codon"))))
		 '(font-lock-comment-face ((((class color) (min-colors 88) (background light)) (:foreground "Firebrick" :slant italic))))
		 '(font-lock-constant-face ((t (:foreground "cyan3"))))
		 '(font-lock-doc-face ((t (:inherit font-lock-string-face :foreground "firebrick"))))
		 '(font-lock-string-face ((((class color) (min-colors 88) (background light)) (:foreground "DarkGreen"))))
		 '(fuzz-font-lock-annot-face ((((background light)) (:foreground "gray40" :weight bold))))
		 '(italic ((((supports :underline t)) (:slant italic :family "codon"))))
		 '(region ((t (:background "#aff"))))
		 '(tex-verbatim ((t (:background "gray90"))))
		 '(trailing-whitespace ((t (:background "#ffbfbf"))))
		 '(twelf-font-decl-face ((t (:stipple nil :background "white" :foreground "green4" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant normal :weight bold :height 96 :width normal :foundry "cbp" :family "Codon"))) t)
		 '(twelf-font-fvar-face ((t (:stipple nil :background "white" :foreground "Blue1" :inverse-video nil :box nil :strike-through nil :overline nil :underline nil :slant italic :weight normal :height 116 :width normal :family "cbp-codon"))) t)
		 '(xx-font-lock-constructor-face ((t (:foreground "purple3" :weight bold))))))
#+END_SRC
** Chrome
#+BEGIN_SRC emacs-lisp
(ifat baez
		(setq browse-url-browser-function 'browse-url-generic
				browse-url-generic-program "firefox"))
#+END_SRC
** Twelf
#+BEGIN_SRC emacs-lisp
(ifat baez-disabled
		(setq twelf-root "~/tmp/twelf/")
		(load (concat twelf-root "emacs/twelf-init.el"))
		)
#+END_SRC

* Notes Mode
Load my note-taking major mode.
#+BEGIN_SRC emacs-lisp
;; init-dir is set in init.el
(setq load-path (cons init-dir load-path))
(require 'notes-mode)
#+END_SRC
* Generic local post-init config
If we have a file =~/.site-lisp/local.el=, execute it.
#+BEGIN_SRC emacs-lisp
(load jcreed-local-post-file-name t)
#+END_SRC
